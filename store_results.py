# tools/store_results.py
"""
Read:
  • backtest-results.json   – generated by Lean CLI
  • params.json (optional)  – sitting next to the strategy .py
Upload both to Firestore so Looker can join statistics ↔ parameters.

Firestore layout:
  backtest_results/{BACKTEST_ID}
      statistics : { ... }
      charts     : { ... }
      params     : { "FAST_PERIOD": 12, "SLOW_PERIOD": 26 }
      createdAt  : server timestamp
"""

import json, os, sys
from google.cloud import firestore

RESULTS_JSON = "backtest-results.json"
PARAMS_JSON  = "params.json"            # written by evolve workflow
COLLECTION   = "backtest_results"

# ───── 1. env vars ─────
try:
    SA_KEY = os.environ["GCP_SA_KEY"]
    BACKTEST_ID = os.environ["BACKTEST_ID"]
except KeyError:
    print("❌  GCP_SA_KEY or BACKTEST_ID missing"); sys.exit(1)

# ───── 2. Firestore auth ─────
with open("gcp_key.json", "w") as fh:
    fh.write(SA_KEY)
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "gcp_key.json"
db = firestore.Client()
print("✅  Firestore ready")

# ───── 3. load Lean results ─────
try:
    with open(RESULTS_JSON) as fh:
        results = json.load(fh)
except Exception as e:
    print(f"❌  Cannot read {RESULTS_JSON}: {e}"); sys.exit(1)

stats   = results.get("statistics") or results.get("results", {}).get("statistics")
charts  = results.get("charts") or results.get("results", {}).get("charts")

if not stats:
    print("❌  statistics block missing"); sys.exit(1)

# ───── 4. load params if present ─────
params = {}
if os.path.exists(PARAMS_JSON):
    try:
        with open(PARAMS_JSON) as ph:
            params = json.load(ph)
        print(f"📦  Attached params: {params}")
    except Exception as e:
        print(f"⚠️  Could not parse {PARAMS_JSON}: {e}")

# ───── 5. push to Firestore ─────
payload = {
    "createdAt": firestore.SERVER_TIMESTAMP,
    "statistics": stats,
    "charts": charts,
    "params": params,
}

db.collection(COLLECTION).document(BACKTEST_ID).set(payload)
print(f"🚀  Uploaded to {COLLECTION}/{BACKTEST_ID}")
