name: evolve
on:
  schedule:
    - cron:  '*/30 * * * *'          # every 30 min
  workflow_dispatch:

jobs:
  evolve:
    runs-on: ubuntu-latest
    env:
      LEAN_CLOUD_PROJECT: ${{ secrets.LEAN_PROJECT_ID }}
      LEAN_API_TOKEN:     ${{ secrets.LEAN_API_TOKEN }}
      GCP_SA_KEY:         ${{ secrets.GCP_SA_KEY }}
      FIRESTORE_PROJECT:  ${{ secrets.FIRESTORE_PROJECT }}   # <-- new
      NUM_CHILDREN: 5
    steps:

    - name: Checkout repo
      uses: actions/checkout@v4

    # -------- 1. Generate candidate code ------------------------------------
    - name: üß¨ Generate new child strategy
      run: python scripts/algo_gen.py --num $NUM_CHILDREN

    # -------- 2. Back-test the candidate ------------------------------------
    - name: üöÄ Run back-test in Lean Cloud
      run: |
        BACKTEST_ID=$(lean cloud backtest "$LEAN_CLOUD_PROJECT" \
                      --name "candidate-$(date +%s)" \
                      | grep -oP 'Backtest id: \K[0-9a-f]+')
        echo "BACKTEST_ID=$BACKTEST_ID" >> $GITHUB_ENV

    # -------- 3. Download results & save to Firestore -----------------------
    - name: üì• Download results.json
      run: |
        lean cloud backtest-results "$LEAN_CLOUD_PROJECT" \
             --backtest-id "$BACKTEST_ID" \
             --output backtest-results.json

    - name: üóÑÔ∏è  Store results in Firestore
      run: python scripts/store_results.py
      env:
        BACKTEST_ID: ${{ env.BACKTEST_ID }}

    # -------- 4. Evaluate vs champion ---------------------------------------
    - name: üèÜ Evaluate candidate
      id: evaluate
      run: python scripts/evaluate.py
      env:
        BACKTEST_ID:       ${{ env.BACKTEST_ID }}

    # -------- 5. Promote if better ------------------------------------------
    - name: üö¢ Promote new champion
      if: success() && steps.evaluate.outputs.promote == 'true'
      uses: peter-evans/create-pull-request@v6
      with:
        branch: champion
        commit-message: "Promote ${{ env.BACKTEST_ID }} to champion"
        title: "Automated promotion of better strategy"
        body: "Sharpe improved ‚Äì promoted automatically."

