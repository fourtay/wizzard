name: evolve          # automatic genetic-style strategy search

# ────────────────────────────────
# 1. Triggers
# ────────────────────────────────
on:
  workflow_dispatch:          # run manually from the Actions tab
  schedule:                   # or run every 30 min
    - cron: '*/30 * * * *'

# ────────────────────────────────
# 2. Global defaults
# ────────────────────────────────
env:
  # genetic exploration settings
  NUM_CHILDREN: 6             # how many variants per generation
  FAST_MIN: 5                 # SMA fast period search range
  FAST_MAX: 25
  SLOW_MIN: 30                # SMA slow period search range
  SLOW_MAX: 60

  # QuantConnect project ID (already exists in your QC org)
  PROJECT_ID: 23708106

# ────────────────────────────────
# 3. Jobs
# ────────────────────────────────

jobs:

  # ── J-1: Generate children code files ─────────────────────────────
  generate:
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️  Checkout repo
        uses: actions/checkout@v3

      - name: 🐍  Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 📦  Install deps for algo_gen
        run: pip install numpy

      - name: 🧬  Run algorithm generator
        run: |
          python tools/algo_gen.py \
            --num $NUM_CHILDREN \
            --fast-min $FAST_MIN --fast-max $FAST_MAX \
            --slow-min $SLOW_MIN --slow-max $SLOW_MAX

      # outputs/ now contains:
      #   child_0.py … child_5.py
      #   params_0.json … params_5.json

  # ── J-2: One back-test per child (matrix) ─────────────────────────
  backtest-child:
    needs: generate
    runs-on: ubuntu-latest

    strategy:
      matrix:
        idx: [0, 1, 2, 3, 4, 5]        #  NUM_CHILDREN slots

    env:
      CHILD_IDX: ${{ matrix.idx }}
      PROJECT_ID: ${{ env.PROJECT_ID }}

    steps:
      - name: ⬇️  Checkout repo
        uses: actions/checkout@v3

      - name: 🐍  Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 💾  Install Lean CLI
        run: pip install quantconnect-lean

      - name: 📑  Copy generated child code & params
        run: |
          mkdir -p strategy
          cp outputs/child_${CHILD_IDX}.py strategy/main.py
          cp outputs/params_${CHILD_IDX}.json params.json

      - name: 🚀  Run cloud back-test
        id: backtest
        run: |
          lean cloud backtest "$PROJECT_ID" \
            --project-path strategy \
            --name "auto_${CHILD_IDX}" \
            --output backtest-results.json

      - name: 🔎  Extract BACKTEST_ID from JSON
        id: extract
        run: |
          BACKTEST_ID=$(jq -r '.backtest' backtest-results.json)
          echo "id=$BACKTEST_ID" >> "$GITHUB_OUTPUT"

      # ── NEW: copy params.json so store_results picks it up
      - name: 📨  Attach params.json
        if: steps.backtest.outcome == 'success'
        run: |
          cp params.json params.json || true

      - name: 🗄️  Store stats + params to Firestore
        if: steps.backtest.outcome == 'success'
        env:
          BACKTEST_ID: ${{ steps.extract.outputs.id }}
          GCP_SA_KEY:  ${{ secrets.GCP_SA_KEY }}
        run: |
          python tools/store_results.py
