# =====================================================================
#  .github/workflows/evolve.yml
#  Drives the evolutionary loop:
#    1. Every 20 min (or manual dispatch) create N offspring branches
#    2. Back-test each child on QuantConnect
#    3. Store results ‚Üí Firestore
#    4. Cull branches that fail the quality gate
# =====================================================================

name: evolve-algos

on:
  workflow_dispatch:
  schedule:
    - cron:  '0,20,40 * * * *'   # every 20 min ‚Äî tweak as you like

# -------- global knobs ------------------------------------------------
env:
  NUM_CHILDREN:       "5"      # offspring per generation
  QC_PROJECT_ID:      ${{ secrets.QC_PROJECT_ID }}   # set in repo secrets
  MIN_SHARPE:         "0.20"   # gate threshold
  MAX_DRAWDOWN:       "0.15"
# ---------------------------------------------------------------------

jobs:
# =====================================================================
# 1Ô∏è‚É£  CREATE-OFFSPRING  ‚Äì runs on main, spits out a matrix list
# =====================================================================
  create-offspring:
    runs-on: ubuntu-latest
    outputs:
      children: ${{ steps.list.outputs.children }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up Python
        uses: actions/setup-python@v4
        with: { python-version: '3.10' }

      - name: Install deps
        run: |
          pip install -r requirements.txt

      - name: Generate offspring strategies
        run: |
          python wizard/evolve.py --num "$NUM_CHILDREN"
          # wizard/evolve.py creates one folder per child under ./offspring
          ls -1 offspring > children.txt

      - id: list
        run: |
          echo "children=$(jq -R -s -c 'split("\n")[:-1]' children.txt)" >> "$GITHUB_OUTPUT"

# =====================================================================
# 2Ô∏è‚É£  BACKTEST EACH CHILD (matrix fan-out)
# =====================================================================
  backtest:
    needs: create-offspring
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        child: ${{ fromJson(needs.create-offspring.outputs.children) }}

    env:
      MIN_SHARPE:   ${{ env.MIN_SHARPE }}
      MAX_DRAWDOWN: ${{ env.MAX_DRAWDOWN }}

    steps:
      - name: Checkout child branch
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.child }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with: { python-version: '3.10' }

      - name: Install CLI + libs
        run: |
          pip install lean-cli google-cloud-firestore jq

      # ---------------------------------------------------------------
      #   2-A  RUN the back-test
      # ---------------------------------------------------------------
      - name: Run QuantConnect back-test
        run: |
          lean cloud backtest "$QC_PROJECT_ID" --output backtest-results.json

      # ---------------------------------------------------------------
      #   2-B  STORE results ‚Üí Firestore
      # ---------------------------------------------------------------
      - name: Store results
        run: python store_results.py

      # ---------------------------------------------------------------
      #   2-C  QUALITY GATE
      # ---------------------------------------------------------------
      - name: Quality gate
        id: qgate
        run: |
          python wizard/quality_gate.py backtest-results.json
        continue-on-error: true   # let next step see success/fail

      # ---------------------------------------------------------------
      #   2-D  CULL BAD BRANCH
      # ---------------------------------------------------------------
      - name: Cull branch if failed
        if: steps.qgate.outcome == 'failure'
        run: |
          echo "üî™  ${{ matrix.child }} failed gate ‚Äî deleting"
          git push origin --delete "${{ matrix.child }}" || true
          git branch -D "${{ matrix.child }}" || true
