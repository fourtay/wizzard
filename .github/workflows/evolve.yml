      - name: Spawn next generation
        run: |
          # ----- calc NEXT_GEN string -----
          NEXT_GEN=$(python - <<'PY'
import os, re, datetime as dt; g=os.environ['GENERATION']
n=int(re.search(r'gen(\d+)$',g).group(1))+1
print(re.sub(r'gen\d+$',f'gen{n:02d}',g))
PY)
          echo "ðŸŒ±  Spawning children for $NEXT_GEN"

          # ----- read winners array from previous step -----
          python - <<'PY'
import json, os, sys, pathlib, subprocess, random
NUM_CHILD=int(os.getenv("NUM_CHILDREN",5))
WINNERS=json.loads(os.getenv("WIN_JSON"))
next_gen=os.getenv("NEXT_GEN")
mut="wizard/mutate_params.py"

for w in WINNERS:
    parent_branch=w["id"].split("--")[0]  # branch name chunk before '--'
    for i in range(1, NUM_CHILD+1):
        child_branch=f"{next_gen}-child{i}-{random.randint(0,9999):04d}"
        subprocess.run(["git","checkout","-b",child_branch,parent_branch],check=True)
        # make child working dir
        work="algo"
        pathlib.Path(work).mkdir(exist_ok=True)
        # mutate params & stage
        subprocess.run([sys.executable, mut, parent_branch, work], check=True)
        git_files=[f"{work}/parameters.json"]
        subprocess.run(["git","add"]+git_files, check=True)
        subprocess.run(["git","commit","-m",f'mutate params for {child_branch}'],check=True)
        subprocess.run(["git","push","-u","origin",child_branch],check=True)
        # trigger back-test
        subprocess.run([
          "gh","api","repos/{owner}/{repo}/dispatches".format(
             owner="${{ github.repository_owner }}",
             repo="${{ github.event.repository.name }}"
          ),
          "--field","event_type=backtest-branch",
          "--field",f"client_payload={{\"branch\":\"{child_branch}\"}}"
        ])
PY
